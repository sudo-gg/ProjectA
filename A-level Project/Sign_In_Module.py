import tkinter as tkfrom tkinter import messageboximport sqlite3import hashlibdb = sqlite3.connect("User_Data.db")c = db.cursor()c.execute('''CREATE TABLE IF NOT EXISTS Login_Information(ID INTEGER NOT NULL UNIQUE,Username TEXT NOT NULL UNIQUE,Password_Hash TEXT NOT NULL,PRIMARY KEY(ID AUTOINCREMENT))''')# Functionsdef hashText(key):    hash_object = hashlib.sha256()    hash_object.update(key.encode('utf-8'))    hashed_text = hash_object.hexdigest()    return hashed_textdef check_password(password_entry_sign_up):    number = False    capital = False    special = False    # Length check    if 3 < len(password_entry_sign_up.get()) < 31:        # Special character check        for character in password_entry_sign_up.get():            if 47 < ord(character) < 58:                number = True            elif 64 < ord(character) < 91:                capital = True            elif 96 < ord(character) < 123:                pass            else:                special = True        # Check all criteria has been met        if number and capital and special:            return True    else:        return Falsedef add_to_db(username_entry_sign_up, password_entry_sign_up):    # Username length check    if 2 < len(username_entry_sign_up.get()) < 20:        if check_password(password_entry_sign_up):            # If passed validation checks when make variable for the given username and replace spaces with underscores            username = username_entry_sign_up.get()            username = username.replace(" ", "_")            # Using the hash function hash the password to be stored securely            hashed_pass = hash_text(password_entry_sign_up.get())            # Try to enter the information into the database but since the code doesnt know what is already in the db            # Will have to receive the error from the database to then alert the user            try:                c.execute("INSERT INTO Login_Information(Username, Password_Hash) VALUES (?, ?)",                          (username, hashed_pass))                db.commit()                messagebox.showinfo("Sign Up Successful", "Account created successfully!")            except sqlite3.IntegrityError:                messagebox.showerror("Sign up Failed", "Username already taken")        else:            messagebox.showerror("Sign up Failed",                                 "Password must be 4 or more and 30 or less characters as well as contain at least a special character,number and capital letter")    else:        messagebox.showerror("Sign up Failed", "Username must be 3 or more and 19 or less characters")def sign_up():    # Will be a section of the login page so by making a Top level will close automatically when the login page is    # closed    rootSignUp = tk.Toplevel()    rootSignUp.title("Sign Up Form")    rootSignUp.geometry('300x150')    # title    labelTitle = tk.Label(rootSignUp, text="Sign In")    labelTitle.pack()    # Username label & entry    usernameLabelSignUp = tk.Label(rootSignUp, text="Username:")    usernameLabelSignUp.pack()    usernameEntrySignUp = tk.Entry(rootSignUp)    usernameEntrySignUp.pack()    # Password label & entry    passwordLabelSignUp = tk.Label(rootSignUp, text="Password:")    passwordLabelSignUp.pack()    passwordEntrySignUp = tk.Entry(rootSignUp)    passwordEntrySignUp.pack()    # Create sign-up button    btn_signup = tk.Button(rootSignUp, text="Sign Up",                           command=lambda: add_to_db(usernameEntrySignUp, passwordEntrySignUp))    btn_signup.pack()    rootSignUp.mainloop()def validateLogin(entryUsername, entryPassword, function, root):    username = entryUsername.get()    hashedPass = hashText(entryPassword.get())    # Presence check    if username and entryPassword.get():        c.execute('''SELECT Username,Password_Hash        FROM Login_Information        WHERE Username=? AND Password_Hash=?''', (username, hashedPass))        # if the selected username and password exists then login success        if c.fetchone():            messagebox.showinfo("Login Successful", "Welcome!")            root.destroy()            function()        # the fetchone method will return none if no selecton has been made (if account doesn't exist)        else:            messagebox.showerror("Login Failed", "Invalid username or password")    else:        messagebox.showerror("Login Failed", "Enter a username and password")def log_in(function):    #    global root_log_in    root_log_in = tk.Tk()    root_log_in.title("Login Page")    # root_log_in.geometry("250x200")    root_log_in.geometry("500x400")    # Create a label for the title    label_title = tk.Label(root_log_in, text="Login Page", font="Helvetica")    label_title.pack()    # Username label & entry    username_label_log_in = tk.Label(root_log_in, text="Username:")    username_label_log_in.pack()    username_entry_log_in = tk.Entry(root_log_in)    username_entry_log_in.pack()    # Password label & entry    password_label_log_in = tk.Label(root_log_in, text="Password:")    password_label_log_in.pack()    password_entry_log_in = tk.Entry(root_log_in, show="*")    password_entry_log_in.pack()    # Create login button (they will use python lambda functions)    btn_login = tk.Button(root_log_in, text="Login",                          command=lambda: validate_login(username_entry_log_in, password_entry_log_in, function))    btn_login.pack()    # Create sign-up label and link it to the sign_up() function    label_signup = tk.Label(root_log_in, text="Don't have an account? Sign up!", fg="blue", cursor="hand2")    label_signup.pack()    label_signup.bind("<Button-1>", lambda x: sign_up())    root_log_in.mainloop()def func():    passlog_in(func)